# -*- coding: utf-8 -*-
"""neuron_impulse_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LMzGS-tNSD7uRnQdVxtP-jQysYf8XtZ4
"""

import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import os
from PIL import Image

def hodgkin_huxley(time, duration, dt, I_inj, Cm, gNa_max, gK_max, gL, ENa, EK, EL):
    """
    Simulate neuron impulse response using Hodgkin-Huxley model.

    Parameters:
        time (array): Time points for simulation.
        duration (float): Duration of the simulation.
        dt (float): Time step for simulation.
        I_inj (array): Injected current over time.
        Cm (float): Membrane capacitance.
        gNa_max (float): Maximum sodium conductance.
        gK_max (float): Maximum potassium conductance.
        gL (float): Leak conductance.
        ENa (float): Sodium reversal potential.
        EK (float): Potassium reversal potential.
        EL (float): Leak reversal potential.

    Returns:
        voltage (array): Voltage response of the neuron.
    """
    # Initial values
    V = -65.0    # Membrane potential
    m = alpha_m(V) / (alpha_m(V) + beta_m(V))     # Sodium activation gating variable
    h = alpha_h(V) / (alpha_h(V) + beta_h(V))     # Sodium inactivation gating variable
    n = alpha_n(V) / (alpha_n(V) + beta_n(V))     # Potassium gating variable

    # Arrays to store results
    voltage = np.zeros(len(time))

    # Simulation loop
    for i in range(len(time)):
        # Hodgkin-Huxley equations
        m_inf = alpha_m(V) / (alpha_m(V) + beta_m(V))
        h_inf = alpha_h(V) / (alpha_h(V) + beta_h(V))
        n_inf = alpha_n(V) / (alpha_n(V) + beta_n(V))

        tau_m = 1 / (alpha_m(V) + beta_m(V))
        tau_h = 1 / (alpha_h(V) + beta_h(V))
        tau_n = 1 / (alpha_n(V) + beta_n(V))

        V += (dt / Cm) * (I_inj[i] - gNa_max * m ** 3 * h * (V - ENa) - gK_max * n ** 4 * (V - EK) - gL * (V - EL))
        m += (dt / tau_m) * (m_inf - m)
        h += (dt / tau_h) * (h_inf - h)
        n += (dt / tau_n) * (n_inf - n)

        voltage[i] = V

    return voltage

def alpha_m(V):
    return 0.1 * (V + 40.0) / (1.0 - np.exp(-(V + 40.0) / 10.0))

def beta_m(V):
    return 4.0 * np.exp(-(V + 65.0) / 18.0)

def alpha_h(V):
    return 0.07 * np.exp(-(V + 65.0) / 20.0)

def beta_h(V):
    return 1.0 / (1.0 + np.exp(-(V + 35.0) / 10.0))

def alpha_n(V):
    return 0.01 * (V + 55.0) / (1.0 - np.exp(-(V + 55.0) / 10.0))

def beta_n(V):
    return 0.125 * np.exp(-(V + 65) / 80.0)

def main():
    st.set_page_config(page_title="Hodgkin-Huxley Neuron Simulation", page_icon=":brain:", layout="wide")
    st.sidebar.image("https://www.nih.gov/sites/default/files/styles/featured_media_breakpoint-large-extra/public/news-events/news-releases/2016/YendikiRainbowBrain.png?itok=xjicKAWA&timestamp=1465389580t.png", use_column_width=True)


    st.title("Simulating the Hodgkin-Huxley Model")
    st.set_option('deprecation.showPyplotGlobalUse', False)
    st.markdown(
        """
        The Hodgkin-Huxley model describes the membrane potential dynamics of a neuron more accurately
        than a simple exponential decay through a set of differential equations that
        model the behavior of ion channels in the membrane.
        """
    )
    st.write("### Model Formula")
    st.latex(r'''
        C_m \frac{{dV}}{{dt}} = I_{\text{inj}} - g_{\text{Na}}m^3h(V-E_{\text{Na}}) - g_{\text{K}}n^4(V-E_{\text{K}}) - g_L(V-E_L)
    ''')


    st.sidebar.header("Simulation Parameters")
    duration = st.sidebar.slider("Simulation Duration", min_value=1, max_value=100, value=10, step=1)
    dt = st.sidebar.slider("Time Step (dt)", min_value=0.001, max_value=0.1, value=0.01, step=0.001)
    I_inj_amplitude = st.sidebar.slider("Injected Current Amplitude", min_value=0.1, max_value=10.0, value=2.0, step=0.1)
    I_inj_duration = st.sidebar.slider("Injected Current Duration", min_value=1, max_value=10, value=5, step=1)
    Cm = st.sidebar.slider("Membrane Capacitance (Cm)", min_value=0.1, max_value=10.0, value=1.0, step=0.1, help="Capacity of the neuron membrane to store charge.")
    gNa_max = st.sidebar.slider("Max Sodium Conductance (gNa_max)", min_value=0.1, max_value=200.0, value=120.0, step=1.0, help="Maximum sodium conductance.")
    gK_max = st.sidebar.slider("Max Potassium Conductance (gK_max)", min_value=0.1, max_value=200.0, value=36.0, step=1.0, help="Maximum potassium conductance.")
    gL = st.sidebar.slider("Leak Conductance (gL)", min_value=0.1, max_value=10.0, value=0.3, step=0.1, help="Conductance of the leak channels.")
    ENa = st.sidebar.slider("Sodium Reversal Potential (ENa)", min_value=-100.0, max_value=100.0, value=50.0, step=1.0, help="Reversal potential for sodium ions.")
    EK = st.sidebar.slider("Potassium Reversal Potential (EK)", min_value=-100.0, max_value=100.0, value=-77.0, step=1.0, help="Reversal potential for potassium ions.")
    EL = st.sidebar.slider("Leak Reversal Potential (EL)", min_value=-100.0, max_value=100.0, value=-54.387, step=1.0, help="Reversal potential for leak channels.")

    time = np.arange(0, duration, dt)
    I_inj = np.zeros_like(time)
    I_inj[int(len(time) / 2):int(len(time) / 2) + int(I_inj_duration / dt)] = I_inj_amplitude

    voltage = hodgkin_huxley(time, duration, dt, I_inj, Cm, gNa_max, gK_max, gL, ENa, EK, EL)

    st.subheader("Neuron Impulse Response")

    fig, ax = plt.subplots(figsize=(3, 3))
    ax.plot(time, voltage, color='pink')
    ax.set_xlabel("Time")
    ax.set_ylabel("Voltage")
    ax.set_title("Neuron Impulse Response")
    ax.set_facecolor('black')
    ax.grid(color='gray', linestyle='--', linewidth=0.5)

    fig.savefig("plot.png")
    image = Image.open('plot.png')
    st.image(image)

if __name__ == "__main__":
    main()